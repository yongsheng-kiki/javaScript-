// 1. 方法作用；
// 2. 方法的参数
// 3. 方法返回值
// 4. 原有的数组是否发生改变；

// 1.push
   1): 向数组末尾新增一项；
   2): 参数是新增的那一项;可以传多个；
   3): 新数组的数组成员的个数；
   4): 原有数组发生改变；

// 2.pop
   1) : 删除数组的最后一项
   2) : 不需要传参数
   3) : 被删除的那一项
   4) : 原有数组发生改变；

// 3:unshift
    1): 向数组开头新增一项；
    2): 需要传参数
    3): 新数组的数组成员个数
    4): 原有数组发生改变；

// 4.shift
    1): 删除数组的第一项
    2): 不需要传参
    3): 被删除的那一项
    4): 原有数组的发生改变；

// 5.slice
   1) : 数组的截取
   2) :slice(m,n): 从数组索引m开始，截取到索引n，但是不包含n;[前包后不包]
       slice(m) : 从索引m开始，截取到末尾；
       slice():数组的克隆  slice(0);
       // 索引负数： 让当前length+负数；
   3) : 返回值是截取的数组
   4) : 原有数组不发生改变；
// 6.splice
    1) : 删除数组中的某几项
    2) : splice(m,n): 从索引开始，删除n个
         splice(m) : 从索引m开始删除到末尾；
         splice(0):
         splice(m,x,n);替换从索引m开始，删除x个，用n替换；
    3): 返回值；删除那几项，并且以数组返回
    4) : 原有数组发生改变；

// 7.sort
    1) : 数组排序
    2) :参数
       1.sort() : 只能数组成员是相同位数的数组
       2.sort(function(a,b){return a-b}) 从小到大排序
       3.sort(function(a,b){return b-a})从大到小
    3) : 是排序之后的数组
    4) : 原有数组发生改变；

// 8.reverse
   1): 将数组颠倒过来
   2): 不需要传参数
   3): 数组成员顺序倒过来之后的数组
   4): 原有发生改变；

// 9.concat :
   1) : 数组的拼接
   2) :
      1.不传参数： 数组的克隆
      2.传参数，（数组、每一项）；把传入的实参拼接新的数组中；
   3) : 拼接之后的新数组
   4) : 原有数组不发生改变；

// 10.join
   1) : 把数组成员按照特定的字符连接成一个字符串；
   2) :
      1.不传参数,会默认按照逗号分开
      2.传参数，(特定的字符)
   3) : 拼接之后的字符串
   4) :原有数组不发生改变；
// 11.indexOf
  1) : 检测数组成员在数组中第一次出现的索引位置； 判断当前项是否在数组中存在；如果不存在，返回-1；
  2): 需要参数
  3): 返回在数组中第一次出现的索引；
  4): 原有数组不发生改变；

 // 12.
   1) : 检测数组成员在数组中最后一次出现的索引位置； 判断当前项是否在数组中存在；如果不存在，返回-1；
   2): 需要参数
   3): 返回在数组中最后一次出现的索引；
   4): 原有数组不发生改变；


 // 13 .map
    1) : 遍历数组和映射
    2): 需要参数
    3) : 映射之后的数组
    4): 原有数组不发生改变；
//14.forEach
    1) : 遍历数组;没有返回值；
    2) : 需要参数
    3) : 返回值是undefined
    4) : 原有数组不发生改变；

// 15.toString
   1) : 转字符串
   2) : 不需要参数
   3) : 返回一个去了中括号之后的字符串
   4) : 原有数组不变；



